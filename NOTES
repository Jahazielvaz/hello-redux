TUTORIAL SOURCE:
https://medium.freecodecamp.org/understanding-redux-the-worlds-easiest-guide-to-beginning-redux-c695f45546f6

REMEMBERING PARAMETERS

store - reducer, initialState: The reducer is mandatory. The store also contains the initial state
  EXAMPLE:
    import createStore from 'redux';
    import reducer from './reducers'

    const initialState = {
      myState: "This is my initial state"
    }

    const store = createStore(reducer, initialState)
---------------------------------------

reducer - state, action : contains the state as well as an action. The reducer goes and grabs the initial state from the store, and also updates the store through the action commands.
  EXAMPLE:
    const reducer = (state, action) => state;
---------------------------------------

action - type, payload : The type tells the reducer how to identify which action it is, while the payload is what contains your requested new state data, or in other words the new state object
  EXAMPLE:
    const action = {
      type: MY_NEW_STATE,
      payload: {
        newMessage: "This is my new message",
        moreStuff: "Here you can have as many lines as you want"
      }
    }

///////////////////////////////////////
                          REACT ADVANCED

NEW REACT FEATURE - ARRAYS INSTEAD OF ELEMENTS:  So in the new react, you can wrap components inside an array as opposed to having to wrap them in a div or another element. But you need to make sure that you add a key attribute to each of the elements, and add commas since they're arrays.
  EXAMPLE:
    Regular Way:
      const MyComponent = () => {
        return(
          <div>
            <h1>Hello World</h1>
            <p>This is my message to the world</p>
          </div>
        )
      }

    New Way:
      const MyComponent = () => {
        return(
          [
            <h1 key={1}>Hello World</h1>,
            <p key={2}>This is my message to the world</p>
          ]
        )
      }
----------------------------------------------
PASSING AN OBJECT AS PROPS INSTEAD OF SPECIFYING PROPS IN A STATELESS COMPONENT:
  I don't think this is a new feature, but basically you also have the option of passing in a property as an object instead of accessing through props dot notation.
    EXAMPLE:
      Old Way:
        Stateful Component:
          <MyCustomElement myProperty="Hello World"></MyCustomElement>

        Stateless Component:
          const MyCustomElement = (props) => {
            return(
              <div>{props.myProperty}</div>
            )
          }

      New Way:
        Stateful Component:
          <MyCustomElement myProperty="Hello World"></MyCustomElement>

        Stateless Component:
          const MyCustomElement = ({myProperty}) => {
            return(
              <div>{myProperty}</div>
            )
          }







.
